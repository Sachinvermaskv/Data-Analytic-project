import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

# Load the MovieLens dataset
movies = pd.read_csv('movies.csv')   # Contains movie details (movieId, title, genres)
ratings = pd.read_csv('ratings.csv') # Contains user ratings (userId, movieId, rating)

# View the first few rows
print(movies.head())
print(ratings.head())

# Merge movies and ratings datasets
movie_data = pd.merge(ratings, movies, on='movieId')

# Group by movie titles and calculate the average rating and number of ratings
movie_ratings = movie_data.groupby('title').agg({'rating': ['mean', 'count']})
movie_ratings.columns = ['average_rating', 'rating_count']
movie_ratings = movie_ratings.reset_index()

# Filter movies with a minimum number of ratings for reliability
popular_movies = movie_ratings[movie_ratings['rating_count'] > 50]

# Create a genre-based recommendation system
movies['genres'] = movies['genres'].fillna('')  # Fill missing genres
count_vectorizer = CountVectorizer(tokenizer=lambda x: x.split('|'))
genre_matrix = count_vectorizer.fit_transform(movies['genres'])

# Compute similarity between movies
genre_similarity = cosine_similarity(genre_matrix, genre_matrix)

# Define a function to recommend movies
def recommend_movies(movie_title, similarity_matrix, movie_df, top_n=10):
    # Get the index of the given movie
    idx = movie_df[movie_df['title'] == movie_title].index[0]
    
    # Find similarity scores for the movie
    similarity_scores = list(enumerate(similarity_matrix[idx]))
    
    # Sort by similarity scores
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    
    # Get the top N similar movies
    top_movies = similarity_scores[1:top_n+1]
    
    # Return the movie titles
    return [movie_df.iloc[i[0]]['title'] for i in top_movies]

# Test the recommendation function
recommended_movies = recommend_movies('Toy Story (1995)', genre_similarity, movies, top_n=5)
print("Recommended Movies:", recommended_movies)

# Create a user-item matrix
user_movie_matrix = movie_data.pivot_table(index='userId', columns='title', values='rating')

# Fill NaN values with 0
user_movie_matrix = user_movie_matrix.fillna(0)

# Compute similarity between users
user_similarity = cosine_similarity(user_movie_matrix)

# Define a function for user-based recommendations
def recommend_for_user(user_id, user_matrix, user_similarity_matrix, top_n=5):
    # Get the user's similarity scores
    user_idx = user_id - 1
    user_scores = user_similarity_matrix[user_idx]
    
    # Weighted average of ratings based on user similarity
    weighted_ratings = np.dot(user_scores, user_matrix)
    
    # Create a dataframe of weighted ratings
    weighted_df = pd.DataFrame(weighted_ratings, index=user_movie_matrix.columns, columns=['weighted_score'])
    
    # Recommend top N movies
    recommended = weighted_df.sort_values('weighted_score', ascending=False).head(top_n)
    return recommended.index.tolist()

# Test the recommendation function
user_recommendations = recommend_for_user(1, user_movie_matrix.values, user_similarity, top_n=5)
print("Recommended Movies for User 1:", user_recommendations)
